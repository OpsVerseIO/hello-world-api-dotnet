name: CI CD Pipeline

on:
  push:
    branches:
      - main
      - master

jobs:
  sonarqube-trigger:
    name: Sonarqube Analysis
    runs-on: windows-latest
    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'zulu' # Alternative distribution options are available.
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v3
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"OpsVerseIO_hello-world-api-dotnet" /o:"opsverseio" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
          dotnet build ./HelloWorldRestApp/HelloWorldRestApp.csproj
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

  opa:
    name: "üöß Unit tests gate"
    runs-on: ubuntu-latest
    needs:
      - sonarqube-trigger
    steps:
      - name: "‚è≥ Validate quality using OPA"
        uses: OpsVerseIO/opa-policy-check@0.1.0
        with:
          opaServerUrl: "https://opa-opsverse.int.devopsnow.io"
          opaServerAuthToken: ${{ secrets.OPA_SERVER_AUTH_TOKEN }}
          opaServerInput: '{"input": null}'
          opaServerPackageName: "example/include"

  opa-code-coverage:
    name: "üöß Code coverage gate"
    runs-on: ubuntu-latest
    needs:
      - sonarqube-trigger
    steps:
      - name: "‚è≥ Validate quality using OPA"
        uses: OpsVerseIO/opa-policy-check@0.2.0
        with:
          opaServerUrl: "https://opa-opsverse.int.devopsnow.io"
          opaServerAuthToken: ${{ secrets.OPA_SERVER_AUTH_TOKEN }}
          opaServerInput: '{"input": null}'
          opaServerPackageName: "example/include"
          skipTlsValidation: true

  opa-sonarqube:
    name: "üöß Static code analysis gate"
    runs-on: ubuntu-latest
    needs:
      - sonarqube-trigger
    steps:
      - name: "‚è≥ Validate quality using OPA"
        uses: OpsVerseIO/opa-policy-check@0.2.0
        with:
          opaServerUrl: "https://opa-opsverse.int.devopsnow.io"
          opaServerAuthToken: ${{ secrets.OPA_SERVER_AUTH_TOKEN }}
          opaServerInput: '{"input": null}'
          opaServerPackageName: "example/include"
          skipTlsValidation: true

  build:
    name: "üì¶ Build docker image and push to Amazon ECR"
    runs-on: ubuntu-latest
    env:
      APP_NAME: hello-world-api-dotnet
    needs:
      - sonarqube-trigger
      - opa
      - opa-code-coverage
      - opa-sonarqube
    timeout-minutes: 10
    steps:
      - name: "üîß Add dynamic envs"
        run: |
          echo "SHORT_SHA=`echo ${GITHUB_SHA} | cut -c1-8`" >> $GITHUB_ENV
          echo "SHA= ${GITHUB_SHA}"
          echo "SHORT SHA= ${SHORT_SHA}"

      - name: "‚òÅÔ∏è checkout repository"
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: "üîí Login to Amazon ECR üîì"
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: "üì¶üìÇ Build, tag, and push docker image to Amazon ECR"
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: "hello-world-api-dotnet"
          IMAGE_TAG: ${{ env.SHORT_SHA }}
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

  update-image-stage:
    name: "üìù Update STAGE image tag"
    runs-on: ubuntu-latest
    needs:
      - sonarqube-trigger
      - opa
      - opa-code-coverage
      - opa-sonarqube
      - build
    timeout-minutes: 10
    steps:
      - name: "üîß Add dynamic envs"
        id: "image-tag"
        run: |
          echo "SHORT_SHA=`echo ${GITHUB_SHA} | cut -c1-8`" >> $GITHUB_ENV
          echo "SHA= ${GITHUB_SHA}"
          echo "SHORT SHA= ${SHORT_SHA}"
          echo "::set-output name=version::$SHORT_SHA"

      - name: Checkout Target Repository
        uses: actions/checkout@v3
        with:
          repository: "OpsVerseIO/deployment-manifests"
          path: main
          token: ${{ secrets.GH_PAT }}

      - name: "üìù Update Image tag Version in the DEV manifest file"
        uses: OpsVerseIO/image-updater-action@0.1.0
        with:
          repository: "OpsVerseIO/deployment-manifests"
          valueFile: 'hello-world-api-dotnet/helm/stage/values.yaml'
          propertyPath: 'helloworldapidotnet.image.tag'
          value: '${{ env.SHORT_SHA }}'
          branch: main
          createPR: false
          message: '[STAGE] Update Image tag of hello-world-api-dotnet'
          token: ${{ secrets.GH_PAT }}
          workDir: main
          masterBranchName: main
          targetBranch: main
          force: true
          updateFile: true

  release-stage:
    name: "üöÄ Deploy to STAGE (ArgoCD Sync)"
    runs-on: ubuntu-latest
    needs:
      - sonarqube-trigger
      - opa
      - opa-code-coverage
      - opa-sonarqube
      - build
      - update-image-stage
    timeout-minutes: 10
    steps:
      - name: "üîß Trigger ArgoCD Sync/Deployment in STAGE"
        uses: opsverseio/argocd-sync@0.2.0
        with:
          address: ${{ secrets.ARGOCD_SERVER }}
          token: ${{ secrets.ARGOCD_TOKEN }}
          action: sync
          appName: ${{ secrets.ARGOCD_PROD_APP_NAME }}
          disableTlsVerification: "true"

      - name: "üöÄ Deploy to STAGE"
        run: |
            echo "‚è≥ Deploying the application to STAGE"
            echo "üöÄ‚úÖüíö Successfully synced STAGE ArgoCD and deployed the application to STAGE"

  integration-test:
    name: "üö® Run integration test suite"
    needs:
      - sonarqube-trigger
      - opa
      - opa-code-coverage
      - opa-sonarqube
      - build
      - release-stage
    runs-on: ubuntu-latest
    steps:
      - name: "üì©üì® Message from Open Policy Agent (OPA) Server"
        run: |
          echo "Running integration test suite"
          echo "‚åõ Connecting to STAGE application at: https://staging-server.opsverse.io"
          echo "‚úÖüíö Integration tests passed"         

  integration-test-opa:
    name: "üöß Integration tests gate"
    needs:
      - sonarqube-trigger
      - opa
      - opa-code-coverage
      - opa-sonarqube
      - build
      - release-stage
      - integration-test
    runs-on: ubuntu-latest 
    steps:
      - name: "‚è≥ Validate quality using OPA"
        uses: OpsVerseIO/opa-policy-check@0.2.0
        with:
          opaServerUrl: "https://opa-opsverse.int.devopsnow.io"
          opaServerAuthToken: ${{ secrets.OPA_SERVER_AUTH_TOKEN }}
          opaServerInput: '{"input": null}'
          opaServerPackageName: "example/include"
          skipTlsValidation: true

  update-image-prod:
    name: "üìù Update prod image tag"
    runs-on: ubuntu-latest
    needs:
      - sonarqube-trigger
      - opa
      - opa-code-coverage
      - opa-sonarqube
      - build
      - release-stage
      - integration-test
      - integration-test-opa
    timeout-minutes: 10
    steps:
      - name: "üîß Add dynamic envs"
        id: "image-tag"
        run: |
          echo "SHORT_SHA=`echo ${GITHUB_SHA} | cut -c1-8`" >> $GITHUB_ENV
          echo "SHA= ${GITHUB_SHA}"
          echo "SHORT SHA= ${SHORT_SHA}"
          echo "::set-output name=version::$SHORT_SHA"

      - name: Checkout Target Repository
        uses: actions/checkout@v3
        with:
          repository: "OpsVerseIO/deployment-manifests"
          path: main
          token: ${{ secrets.GH_PAT }}

      - name: "üìù Update Image tag Version in the PROD manifest file"
        uses: OpsVerseIO/image-updater-action@0.1.0
        with:
          repository: "OpsVerseIO/deployment-manifests"
          valueFile: 'hello-world-api-dotnet/helm/prod/values.yaml'
          propertyPath: 'helloworldapidotnet.image.tag'
          value: '${{ env.SHORT_SHA }}'
          branch: main
          createPR: false
          message: '[PROD] Update Image tag of hello-world-api-dotnet'
          token: ${{ secrets.GH_PAT }}
          workDir: main
          masterBranchName: main
          targetBranch: main
          force: true
          updateFile: true

  release-prod:
    environment:
      name: production
    name: "üöÄ Deploy to PROD (ArgoCD Sync)"
    needs:
      - sonarqube-trigger
      - opa
      - opa-code-coverage
      - opa-sonarqube
      - build
      - release-stage
      - integration-test
      - integration-test-opa
      - update-image-prod
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: "üîß Trigger ArgoCD Sync/Deployment in PROD"
        uses: opsverseio/argocd-sync@0.2.0
        with:
          address: ${{ secrets.ARGOCD_SERVER }}
          token: ${{ secrets.ARGOCD_TOKEN }}
          action: sync
          appName: ${{ secrets.ARGOCD_PROD_APP_NAME }}
          disableTlsVerification: "true"

      - name: "üöÄ Deploy to PROD ENV"
        run: |
          echo "‚è≥ Deploying the application to PROD"
          echo "üöÄ‚úÖüíö Successfully synced PROD ArgoCD and deployed the application to PROD"

  cleanup:
    name: "‚ôªÔ∏è Cleanup actions"
    needs:
      - release-stage
      - release-prod
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: "‚ôªÔ∏è remove build artifacts"
        run: |
          echo "‚ôªÔ∏è Cleaning up the build artifacts"
          echo "‚ôªÔ∏è‚úÖ Successfully cleaned up the build artifacts"
